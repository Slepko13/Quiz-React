{"version":3,"sources":["assets/img/1.png","assets/img/2.png","assets/img/3.png","assets/img/4.png","assets/img/5.png","assets/img/logo.svg","components/Start/Start.js","components/Quiz/Quiz.js","components/Result/Result.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Start","getQuestions","getQuestionsAxios","className","to","onClick","Quiz","props","runningQuestion","question","answers","runningQuestionIndex","lastQuestionIndex","nextQuestion","handleAnswer","userAnswer","getResult","action","map","answer","key","type","name","id","value","checked","onChange","htmlFor","Result","score","total","scorePerCent","Math","round","src","img5","img4","img3","img2","img1","alt","App","state","questions","undefined","bind","resetState","data","this","q","Object","values","setState","length","axios","get","response","console","log","e","preventDefault","correct_answers","prevState","target","href","logo","width","path","exact","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f0160178.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1.3088c808.png\";","module.exports = __webpack_public_path__ + \"static/media/2.0476b393.png\";","module.exports = __webpack_public_path__ + \"static/media/3.6f751ab4.png\";","module.exports = __webpack_public_path__ + \"static/media/4.b2286b0f.png\";","module.exports = __webpack_public_path__ + \"static/media/5.d9868c42.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport './Start.scss';\r\nimport questions from '../../assets/questions/questions.json';\r\n\r\n\r\nconst Start = ({ getQuestions, getQuestionsAxios }) => {\r\n    return (\r\n        <div className=\"Start  bg-dark\">\r\n            <p className=\"title\">Перевір наскільки ти кіберспортивний експерт</p>\r\n            <div className=\"button__wrapper\">\r\n                <button className=\" btn btn-primary\">\r\n                    <Link\r\n                        to=\"/quiz\"\r\n                        className=\"link\"\r\n                        onClick={getQuestionsAxios}//!get questions with axios from local json file\r\n                    // onClick={() => { getQuestions(questions) }}//!get questions with import from local json file\r\n                    >Розпочни тест</Link>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Start;","import React from 'react';\r\nimport './Quiz.scss';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Quiz = (props) => {\r\n    let { runningQuestion: { question, answers },\r\n        runningQuestionIndex,\r\n        lastQuestionIndex,\r\n        nextQuestion,\r\n        handleAnswer,\r\n        userAnswer,\r\n        getResult\r\n    } = props;\r\n\r\n    return (\r\n        <div className=\"Quiz\">\r\n            <div className=\"title\">\r\n                <div className=\"question\">Запитання № {runningQuestionIndex + 1}</div>\r\n                <div className=\"question\">{question}</div>\r\n            </div>\r\n            <form action=\"\" className=\"form\">\r\n                <div className=\"form-group\">\r\n                    {answers.map(answer => {\r\n                        return (\r\n                            <div key={answer} className=\"form-check \">\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    className=\"form-check-input\"\r\n                                    name=\"question\"\r\n                                    id={answer}\r\n                                    value={answer}\r\n                                    checked={userAnswer === answer}\r\n                                    onChange={handleAnswer}\r\n                                />\r\n                                <label htmlFor={answer} className=\"form-check-label\">{answer}</label>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </form>\r\n            <div className=\"bottom__wrapper\">\r\n                <div className=\"prog\">Прогрес: {runningQuestionIndex + 1}/{lastQuestionIndex + 1}</div>\r\n                {runningQuestionIndex <= lastQuestionIndex - 1 ?\r\n                    <input\r\n                        onClick={nextQuestion}\r\n                        className=\"btn btn-primary result__button\"\r\n                        type=\"submit\"\r\n                        value=\"Наступне запитання\"\r\n                    /> :\r\n                    <button className=\"result__button btn btn-danger\">\r\n                        <Link to='/result' className=\"result__link\" onClick={getResult}> Отримати результат</Link>\r\n                    </button>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Quiz;","import React from 'react';\r\nimport './Result.scss';\r\nimport img1 from '../../assets/img/1.png';\r\nimport img2 from '../../assets/img/2.png';\r\nimport img3 from '../../assets/img/3.png';\r\nimport img4 from '../../assets/img/4.png';\r\nimport img5 from '../../assets/img/5.png';\r\n\r\n\r\nconst Result = ({ score, total }) => {\r\n    let scorePerCent = Math.round(100 * score / total) || 0;\r\n    return (\r\n        <div className=\"Result\" >\r\n            <img className=\"result__image\" src={(scorePerCent >= 80) ? img5 :\r\n                (scorePerCent >= 60) ? img4 :\r\n                    (scorePerCent >= 40) ? img3 :\r\n                        (scorePerCent >= 20) ? img2 : img1} alt=\"result\" />\r\n            <div className=\"title\">Ваш результат</div>\r\n            <div className=\"score\">{scorePerCent} %</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Result;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport axios from 'axios';\nimport './App.scss';\nimport Start from './components/Start/Start';\nimport Quiz from './components/Quiz/Quiz';\nimport Result from './components/Result/Result';\nimport logo from '../src/assets/img/logo.svg';\n\nclass App extends Component {\n\n  state = {\n    questions: [],\n    runningQuestionIndex: 0,\n    lastQuestionIndex: undefined,\n    runningQuestion: undefined,\n    userAnswer: undefined,\n    score: 0\n  }\n\n  getQuestions = this.getQuestions.bind(this);\n  nextQuestion = this.nextQuestion.bind(this);\n  resetState = this.resetState.bind(this);\n  handleAnswer = this.handleAnswer.bind(this);\n  getResult = this.getResult.bind(this);\n  getQuestionsAxios = this.getQuestionsAxios.bind(this);\n\n  //!get questions with import from local json file\n  async getQuestions(data) {\n    await this.getQuestionsAxios();\n    let q = Object.values(data);\n    this.setState({\n      questions: q,\n      lastQuestionIndex: q.length - 1,\n      runningQuestion: q[0]\n    })\n  }\n  //!get questions with axios from local json file\n  async getQuestionsAxios() {\n    try {\n      const response = await axios.get('./questions.json');\n      const data = Object.values(response.data);\n      this.setState({\n        questions: data,\n        lastQuestionIndex: data.length - 1,\n        runningQuestion: data[0]\n      })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  nextQuestion(e) {\n    e.preventDefault();\n    if (this.state.userAnswer === this.state.runningQuestion.correct_answers[0]) {\n\n      this.setState((prevState) => ({\n        score: prevState.score++\n      }));\n    }\n    this.setState((state) => ({\n      runningQuestion: state.questions[state.runningQuestionIndex],\n      runningQuestionIndex: state.runningQuestionIndex++,\n      userAnswer: undefined\n    }));\n  }\n\n  getResult() {\n    if (this.state.userAnswer === this.state.runningQuestion.correct_answers[0]) {\n      this.setState((prevState) => ({\n        score: prevState.score + 1\n      }));\n    }\n  }\n  resetState() {\n    this.setState({\n      questions: [],\n      runningQuestionIndex: 0,\n      lastQuestionIndex: undefined,\n      runningQuestion: undefined,\n      userAnswer: undefined,\n      score: 0\n    })\n  }\n\n  handleAnswer(e) {\n    this.setState({\n      userAnswer: e.target.value\n    })\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light \">\n              <a className=\"navbar-brand \" href=\"http://www.google.com\" target=\"blank\">\n                <img src={logo} alt=\"logo\" width=\"150\" />\n              </a>\n              <div className=\"navbar-brand \">Логотип</div>\n              <div className=\" navbar-collapse  justify-content-end\">\n                <ul className=\"navbar-nav  \">\n                  <li className=\"navbar-item\">\n                    <Link to=\"/\" className=\"nav-link\" onClick={this.resetState}>Розпочати знову</Link>\n                  </li>\n                </ul>\n              </div>\n            </nav>\n            <Route path=\"/\" exact >\n              <Start\n                getQuestions={this.getQuestions}//!get questions with import from local json file\n                getQuestionsAxios={this.getQuestionsAxios}//!get questions with axios from local json file\n              />\n            </Route>\n            <Route path=\"/quiz\">\n              {this.state.questions.length ?\n                <Quiz\n                  runningQuestion={this.state.runningQuestion}\n                  runningQuestionIndex={this.state.runningQuestionIndex}\n                  lastQuestionIndex={this.state.lastQuestionIndex}\n                  nextQuestion={this.nextQuestion}\n                  handleAnswer={this.handleAnswer}\n                  userAnswer={this.state.userAnswer}\n                  getResult={this.getResult}\n                /> :\n                <div className=\"loading__data\">Розпочни знову</div>\n              }\n            </Route>\n            <Route path=\"/result\">\n              <Result\n                score={this.state.score}\n                total={this.state.questions.length}\n              />\n            </Route>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}